--------
Win32 Multilingual IME Application Programming Interface
Version 1.41
Win32多言語IME API
翻訳者：片山博文MZ
--------
この文書は、IMEのAPI開発のリファレンスである。
以下の関数はIMEが使うものと意図されている。

=IMM UI関数

以下は、UIウィンドウからアクセス可能な入力方式管理（IMM）関数群である。
これらは、IME状態を変化させるためにアプリからも使うことができる。

ImmGetCompositionWindow
ImmSetCompositionWindow
ImmGetCandidateWindow
ImmSetCandidateWindow
ImmGetCompositionString
ImmSetCompositionString
ImmGetCompositionFont
ImmSetCompositionFont
ImmGetNumCandidateList
ImmGetCandidateList
ImmGetGuideLine
ImmGetConversionStatus
ImmGetConversionList
ImmGetOpenStatus
ImmSetConversionStatus
ImmSetOpenStatus
ImmNotifyIME
ImmCreateSoftKeyboard
ImmDestroySoftkeyboard
ImmShowSoftKeyboard

これらの関数に関しては、Platform SDKにあるIME関数群を参照されたい。

=IMMサポート関数群

以下のトピックは、IMEによってサポートされて使われる、IMM関数群である。

==ImmGenerateMessage関数

IMEはhIMCのhWndにメッセージを送るためにImmGenerateMessage 関数を使う。
送られたメッセージはhIMCのhMsgBufに格納される。

	BOOL WINAPI
	ImmGenerateMessage(
	HIMC hIMC
	)

===引数

hIMC
	hMsgBufを所有する入力コンテキストのハンドル。

===戻り値

関数が成功すれば戻り値はTRUEである。さもなければFALSEになる。

===コメント

これは汎用の関数だ。
典型的に、IMMのImmNotifyIMEを通じてコンテキストの更新について通知されるときに
IMEはこの関数を使う。この場合、IMEがアプリにメッセージを提供する必要があるときでも、
アプリのメッセージキューにキーストロークはない。
IME UIは、UIの見た目だけを更新したいときにこの関数を使うべきではない。
IMEが更新された入力コンテキストについてIMEに伝えられたときは、
IME UIが更新されているべきではない。
キーストロークがなく、変更をアプリに通知する必要があるときで、
IMEが入力コンテキストを変更したときでのみ、
この関数を使うことが推奨される。

==ImmRequestMessage関数

ImmRequestMessage 関数は、アプリにWM_IME_REQUEST メッセージを送るのに使われる。

	LRESULT WINAPI
	ImmRequestMessage(
	HIMC hIMC,
	WPARAM wParam,
	LPARAM lParam)

===引数

hIMC
	ターゲットの入力コンテキストのハンドル。
wParam
	WM_IME_REQUESTメッセージのwParam。
lParam
	WM_IME_REQUESTメッセージのlParam。

===戻り値

戻り値は、WM_IME_REQUEST メッセージの戻り値。

===コメント

この関数は、Windows 98 およびWindow 2000で新しく導入されたもので、
IMEによってWM_IME_REQUESTをアプリへ送るのに使われる。
IMEは、候補ウィンドウやコンポジションウィンドウの位置を定義するときに、
アプリからガイドラインを取得したいかもしれない。
しかし、IMEを完全に意識したアプリ（インライン）では、アプリはたいてい
コンポジションウィンドウの位置をセットしない。
IMEがアプリにリクエストをするとき、
アプリはWM_IME_REQUESTを受け取る。
IMEはImmRequestMessage 関数の呼び出しにより、リクエストをアプリに送るべきであり、
SendMessageを呼ぶべきではない。
次は、ImmRequestMessage関数を通じてIMEがアプリに送ることができるサブメッセージのリストである：

	IMR_COMPOSITIONWINOW
	IMR_CANDIDATEWINDOW
	IMR_COMPOSITIONFONT
	IMR_RECONVERTSTRING
	IMR_CONFIRMRECONVERTSTRING
	IMR_QUERYCHARPOSITION
	IMR_DOCUMENTFEED

それらのメッセージの情報については、Platform SDKの入力方式エディタ関数を参照されたい。

=HIMCおよびHIMCC の管理関数群

以下のトピックは、HIMCとHIMCC の管理関数群である。

==ImmLockIMC関数

ImmLockIMC関数は、IMCに対するロックカウントを１だけ増やす。
IMEがINPUTCONTEXTを参照する必要があるとき、IMEは
INPUTCONTEXT構造体のポインタを取得するためにこの関数を呼び出す。

	LPINPUTCONTEXT WINAPI
	ImmLockIMC(
	HIMC hIMC
	)

===引数

hIMC
	入力コンテキストのハンドル。

===戻り値

関数が成功すれば、INPUTCONTEXT構造体へのポインタを返す。
さもなければNULLを返す。

==ImmUnlockIMC関数

ImmUnlockIMCk関数は、IMCに対するロックカウントを１だけ減らす。

	BOOL WINAPI
	ImmUnlockIMC(
	HIMC hIMC
	)

===引数

hIMC
	入力コンテキストのハンドル。

===戻り値

ロックカウントがゼロになったら、戻り値はFALSEである。
さもなければ戻り値はTRUEである。

==ImmGetIMCLockCount関数

ImmGetIMCLockCount関数は、IMCのロックカウントを取得するのに使われる。

	HIMCC WINAPI
	ImmGetIMCLockCount(
	HIMC hIMC
	)

===引数

hIMC
	入力コンテキストのハンドル。

===戻り値

関数が成功すれば、戻り値はIMCのロックカウントである。
さもなければNULLである。

==ImmCreateIMCC関数

ImmCreateIMCC関数は、IMCのメンバーとしての新しいコンポーネントを作成する。

	HIMCC WINAPI
	ImmCreateIMCC(
	DWORD dwSize
	)

===引数

dwSize
	新しいIMCコンポーネントのサイズ。

===戻り値

関数が成功すれば、戻り値はIMCコンポーネントのハンドル（HIMCC）である。
さもなければ、NULLである。

===コメント

この関数で作成されたIMCコンポーネントは、ゼロで初期化される。

==ImmDestroyIMCC関数

ImmDestroyIMCC関数は、IMCのメンバーとして作成された
IMEコンポーネントを破棄するためにIMEによって使われる。

	HIMCC WINAPI
	ImmDestroyIMCC(
	HIMCC hIMCC
	)

===引数

hIMCC
	IMCコンポーネントのハンドル。

===戻り値

関数が成功すれば戻り値はNULL。さもなければ戻り値は、hIMCCに等しい。

==ImmLockIMCC関数

ImmLockIMCC 関数は、IMCのメンバーとして作成されたIMCコンポーネントへの
ポインタを取得するためにIMEによって使われる。
ImmLockIMCは、IMCCに対するロックカウントを１だけ増加させる。

	LPVOID WINAPI
	ImmLockIMCC(
	HIMCC hIMCC
	)

===引数

hIMCC
	IMCコンポーネントのハンドル。

===戻り値

関数が成功すれば、戻り値は、IMCコンポーネントへのポインタ。
さもなければ戻り値はNULLである。

==ImmUnlockIMCC関数

ImmUnlockIMC関数は、IMCCに対するロックカウントを１だけ減少させる。

	BOOL WINAPI
	ImmUnlockIMCC(
	HIMCC hIMCC
	)

===引数

hIMCC
	IMCコンポーネントのハンドル。

===戻り値

もしロックカウントがゼロになれば、戻り値はFALSEである。
さもなければ戻り値はTRUEである。

==ImmReSizeIMCC関数

ImmReSizeIMCC関数は、コンポーネントのサイズを変更する。

	HIMCC WINAPI
	ImmReSizeIMCC(
	HIMCC hIMCC,
	DWORD dwSize
	)

===引数

hIMCC
	IMCコンポーネントのハンドル。

dwSize
	IMCコンポーネントの新しいサイズ。

===戻り値

関数が成功すれば、戻り値はHIMCCの新しい値である。
さもなければ戻り値はNULLである。

==ImmGetIMCCSize関数

ImmGetIMCCSize関数は、IMCCのサイズを取得するのに使われる。

	DWORD WINAPI
	ImmGetIMCCSize(
	HIMCC hIMCC
	)

===引数

hIMCC
	IMCコンポーネントのハンドル。

===戻り値

IMCCのサイズ。

==ImmGetIMCCLockCount関数

ImmGetIMCCLockCount関数は、IMCCのロックカウントを取得するのに使われる。

	DWORD WINAPI
	ImmGetIMCCLockCount(
	HIMCC hIMCC
	)

===引数

hIMCC
	IMCコンポーネントのハンドル。

===戻り値

関数が成功すれば、戻り値はIMCCのロックカウントである。
さもなければ、戻り値はゼロである。

=IMEホットキーとホットキー関数群

IMEホットキーは、IMEの入力モードを変更したり、
IMEを切り替えたりするのに使われる。
IMEを直接切り替えるのに使われたIMEホットキーは、
直接切り替えホットキー（direct switching hot key）と呼ばれる。

直接切り替えホットキーは、
IME_HOTKEY_DSWITCH_FIRSTからIME_HOTKEY_DSWITCH_LASTまでの範囲になる。
それはIMEや末端ユーザーがそのようなホットキーがほしいときに、
IMEやコントロールパネルによって登録される。
IMEホットキーは、どのIMEがアクティブかに関わらず、
すべてのIMEにおいて効率がいい。

IMMにおいて、いくつかの定義済みホットキー機能が存在する。
IMMはそれ自体がそれらのホットキー関数の機能（異なる取り扱いルーチン）を提供する。
すべてのホットキー機能は、IMMにおいて異なるホットキーIDを持ち、
それぞれのIDは、それぞれの国の特定の必要性に応じた機能を所有する。
アプリが別の定義済みホットキーIDをシステムに追加できないことに注意しておく。

以下は定義済みホットキー識別子である。

(表略)

この他の種類のホットキーは、IMEのプライベートなホットキーであるが、
この種類のホットキーに対する機能は存在しない。
それはホットキーの値に対する単なるプレースホルダーである。
IMEはImmGetHotKeyを呼び出すことにより、その値を取得できる。
もしIMEが１つのホットキーIDに対するこの機能をサポートしたら、
このキー入力が検出されるたびに機能を行うだろう。

以下は、現在定義されているプライベートなIMEホットキーIDである。

(表略)

==ImmGetHotKey関数

ImmGetHotKey関数は、IMEホットキーの値を取得する。

	BOOL WINAPI
	ImmGetHotKey(
	DWORD dwHotKeyID,
	LPUINT lpuModifiers,
	LPUINT lpuVKey,
	LPHKL lphKL
	)

===引数

dwHotKeyID
	ホットキー識別子。

lpuModifiers
	ホットキーの組み合わせキー。
	ALT (MOD_ALT)、CTRL (MOD_CONTROL)、SHIFT (MOD_SHIFT)、左側 (MOD_LEFT)、右側 (MOD_RIGHT)を含む。
	キーアップフラグ (MOD_ON_KEYUP) はホットキーがキーの上がっているとき有効であることを示す。
	モディファイアー無視フラグ (MOD_IGNORE_ALL_MODIFIER) は、モディファイアーの組み合わせが
	ホットキーマッチングにおいて無視されることを示す。

lpuVKey
	このホットキーの仮想キーコード。

lphKL
	IMEのHKL。もしこの引数の戻り値がNULLでなければ、ホットキーは、このHKLのIMEに切り替えることができる。

===戻り値

関数が成功すれば、戻り値はTRUE。さもなければ戻り値はFALSEである。

===コメント

この関数はコントロールパネルから呼ばれる。

==ImmSetHotKey関数

ImmSetHotKey関数は、IMEホットキーの値をセットする。

	BOOL WINAPI
	ImmSetHotKey(
	DWORD dwHotKeyID,
	UINT uModifiers,
	UINT uVKey,
	hKL hKL
	)

=引数

dwHotKeyID
	ホットキーの識別子。

uModifiers
	ホットキーの組み合わせキー。
	ALT (MOD_ALT)、CTRL (MOD_CONTROL)、SHIFT (MOD_SHIFT)、左側 (MOD_LEFT)、右側 (MOD_RIGHT)を含む。
	キーアップフラグ (MOD_ON_KEYUP) はホットキーがキーの上がっているとき有効であることを示す。
	モディファイアー無視フラグ (MOD_IGNORE_ALL_MODIFIER) は、モディファイアーの組み合わせが
	ホットキーマッチングにおいて無視されることを示す。

uVKey
	このホットキーの仮想キーコード。

hKL
	IMEのHKL。この引数が指定されると、ホットキーはこのHKLのIMEに切り替えることができる。

===戻り値

関数が成功すれば、戻り値はTRUE。さもなければ戻り値はFALSEである。

===コメント

この関数は、コントロールパネルから呼ばれる。
特定のキーボードの側を指定しないキーについては、
uModifiers は両側（MOD_LEFT|MODE_RIGHT）を指定すべきだ。

=IMMソフトキーボード関数群

以下のトピックは、ソフトキーボードを操作するためにIMEによって使われるIMM関数群である。

==ImmCreateSoftKeyboard関数

ImmCreateSoftKeyboard関数は、ソフトキーボードウィンドウの一種を作成する。

	HWND WINAPI
	ImmCreateSoftKeyboard(
	UINT uType,
	UINT hOwner,
	int x,
	int y
	)

===引数

uType
	ソフトキーボードの種類を指定する。
	(略）

hOwner
	ソフトキーボードの所有者を指定する。これはUIウィンドウでなければならない。

x
	ソフトキーボードの初期水平位置を指定する。

y
	ソフトキーボードの初期垂直位置を指定する。

===戻り値

この関数は、ソフトキーボードのウィンドウハンドルを返す。

==ImmDestroySoftKeyboard関数

ImmDestroySoftKeyboard関数は、ソフトキーボードウィンドウを破棄する。

	BOOL WINAPI
	ImmDestroySoftKeyboard(
	HWND hSoftKbdWnd
	)

===引数

hSoftKbdWnd
	破棄するソフトキーボードのウィンドウハンドル。

===戻り値

関数が成功すれば、戻り値はTRUE。さもなければ戻り値はFALSE。

==ImmShowSoftKeyboard関数

ImmShowSoftKeyboard 関数は、与えられたソフトキーボードを表示するか、または隠す。

	BOOL WINAPI
	ImmShowSoftKeyboard(
	HWND hSoftKbdWnd,
	int nCmdShow
	)

===引数

hSoftKbdWnd
	ソフトキーボードのウィンドウハンドル。

nCmdShow
	ウィンドウの状態を表す。
	(略)

===戻り値

関数が成功すれば、戻り値はTRUE。さもなければ戻り値はFALSE。

=メッセージ

以下のトピックはUIウィンドウが受け取るメッセージである。

==WM_IME_SETCONTEXTメッセージ

WM_IME_SETCONTEXT メッセージは、アプリのウィンドウがアクティブになったとき、
アプリに送信される。アプリがアプリケーションIMEウィンドウを持たなければ、
アプリはこのメッセージをDefWindowProcに渡し、DefWindowProcの戻り値を返さねばならない。
もしアプリがアプリケーションIMEウィンドウを所有していれば、
アプリはImmIsUIMessageを呼ぶべきである。

	WM_IME_SETCONTEXT
	fSet = (BOOL) wParam;
	lISCBits = lParam;

===引数

fSet
	入力コンテキストがアプリに対してアクティブになったときfSetはTRUEである。 
	もしFALSEなら、入力コンテキストはアプリに対して非アクティブになる。

lISCBits
	lISCBitsは以下のビット組み合わせからなる。
	(略)

===戻り値

戻り値は、DefWindowProcかImmIsUIMessageの戻り値である。

===コメント

アプリがWM_IME_SETCONTEXTをつけてDefWindowProcかImmIsUIMessage を呼んだ後で
UIウィンドウはWM_IME_SETCONTEXTを受け取る。
もしビットがONならば、UIウィンドウはコンポジション、ガイド、候補ウィンドウを
lParamのビット状態として表示する。
もしアプリ自体がコンポジションウィンドウを描画するなら、
UIウィンドウは、コンポジションウィンドウを表示する必要はない。
そのときアプリは、lParamのISC_SHOWUICOMPOSITIONWINDOW ビットをクリアして
DefWindowProc かImmIsUIMessage を呼ぶ必要がある。

==WM_IME_CONTROLメッセージ


WM_IME_CONTROLメッセージは、IME UIを制御するために使われるサブメッセージのグループである。
アプリは、アプリによって作成されたIMEウィンドウと対話するためにこのメッセージを使うことができる。

	WM_IME_CONTROL
	wSubMessage= wParam;
	lpData = (LPVOID) lParam;

===引数

wSubMessage
	サブメッセージの値。

LpData
	wSubMessageに依存する。

次のトピックは、wSubMessageの値によって分類されるサブメッセージである。

IMC_GETSOFTKBDSUBTYPE、IMC_SETSOFTKBDSUBTYPE、IMC_SETSOFTKBDDATA、
IMC_GETSOFTKBDFONT、IMC_SETSOFTKBDFONT、IMC_GETSOFTKBDPOS、およびIMC_SETSOFTKBDPOSを除いて、
アプリは、IMEウィンドウと通信するために、IMCメッセージの代わりにIMM APIを使うことが推奨される。

==IMC_GETCANDIDATEPOSサブメッセージ

IMC_GETCANDIDATEPOS サブメッセージは、候補ウィンドウの位置を取得するために、
アプリによってIMEウィンドウへ送信される。
IMEは、スクリーンの教会に応じて候補ウィンドウの位置を補正できる。
さらにアプリは、候補ウィンドウを他の位置に動かすかどうか決定するために
候補ウィンドウの本当の位置を取得することができる。

	WM_IME_CONTROL
	wSubMessage= IMC_GETCANDIDATEPOS;
	lpCANDIDATENFORM = (LPCANDIDATEFORM) lParam;

===引数

lpCANDIDATENFORM
	候補ウィンドウの位置を得るためのバッファ。

===戻り値

メッセージが成功すれば、戻り値はゼロ。さもなければ戻り値は非ゼロ。

===コメント

戻るときに、IMEはアプリのフォーカスウィンドウのクライアント座標を伴った
lpCANDIDATENFORMによって指し示すCANDIDATEFORM構造体を埋めるだろう。
UIウィンドウは、このメッセージを受け取る。
アプリは別の候補ウィンドウの位置をlpCANIDATEFORM->dwIndexにゼロから3までの値を指定しなければならない
（例えば、インデックス0は、トップレベルの候補ウィンドウである）。

==IMC_GETCOMPOSITONFONTサブメッセージ

IMC_GETCOMPOSITONFONTサブメッセージは、
候補ウィンドウの未決定文字列の表示において、使われるフォントを
取得するために、アプリによってIMEウィンドウへ送信される。

	WM_IME_CONTROL
	wSubMessage= IMC_GETCOMPOSITIONFONT;
	lpLogFont= (LPLOGFONT) lParam;

===引数

lpLogFont
	LOGFONTを受け取るバッファ。

===戻り値

メッセージが成功すれば、戻り値はゼロ。さもなければ戻り値は非ゼロ。

===コメント

UIウィンドウはこのメッセージを受け取らない。

==IMC_GETCOMPOSITONWINDOWサブメッセージ

IMC_GETCOMPOSITONWINDOWメッセージは
コンポジションウィンドウの位置を取得するために、
アプリによってIMEウィンドウへ送信される。
IMEは、コンポジションウィンドウの位置を補正でき、またアプリは
他の位置に動かすかどうかを決定するために、
コンポジションウィンドウの本当の位置を取得できる。

	WM_IME_CONTROL
	wSubMessage= IMC_GETCOMPOSITIONWINDOW;
	lpCOMPOSITIONFORM = (LPCOMPOSITIONFORM) lParam;

===引数

lpCOMPOSITIONFORM
	コンポジションウィンドウの位置を取得するためのバッファ。

===戻り値

メッセージが成功すれば、戻り値はゼロ。さもなければ、戻り値は非ゼロ。

===コメント

戻るときに、IMEはアプリのフォーカスウィンドウのクライアント座標を伴った
lpCANDIDATENFORMによって指し示すCANDIDATEFORM構造体を埋めるだろう。
UIウィンドウはこのメッセージを受け取る。

==IMC_GETSOFTKBDFONTサブメッセージ

IMC_GETSOFTKBDFONTサブメッセージは、
ソフトキーボードウィンドウで表示する文字に使うフォントを取得するために、
IMEによってソフトキーボードへ送信される。

	WM_IME_CONTROL
	wSubMessage= IMC_GETSOFTKBDFONT;
	lpLogFont= (LPLOGFONT) lParam;

===引数

lpLogFont
	LOGFONTを受け取るバッファ。

===戻り値

メッセージが成功すれば、戻り値はゼロ。さもなければ戻り値は非ゼロ。

==IMC_GETSOFTKBDPOSサブメッセージ

IMC_GETSOFTKBDPOSサブメッセージは、ソフトキーボードウィンドウの
位置を取得するために、IMEによってソフトキーボードウィンドウへ送信される。

	WM_IME_CONTROL
	wSubMessage= IMC_GETSOFTKBDPOS;
	lParam = 0;

===引数

lParam
	使用されない。

===戻り値

戻り値は、スクリーン座標系でソフトキーボードの位置のxおよびy座標を含む
POINTS構造体を指定する。

===コメント

POINTS構造体は次の形式を持つ。

	typedef struct tagPOINTS { /* pts */
	SHORT x;
	SHORT y;
	} POINTS;

==IMC_GETSOFTKBDSUBTYPEサブメッセージ

IMC_GETSOFTKBDSUBTYPEサブメッセージは、
IMC_SETSOFTKBDSUBTYPEによってセットされたソフトキーボードウィンドウのサブタイプを取得するために、
IMEによってソフトキーボードウィンドウへ送信される。

	WM_IME_CONTROL
	wSubMessage= IMC_GETSOFTKBDSUBTYPE;
	lParam = 0;

===引数

lParam
	使用されない。

===戻り値

戻り値は、IMC_SETSOFTKBDSUBTYPEによってセットされた、ソフトキーボードのサブタイプである。
-1の戻り値は、失敗を意味する。

==IMC_GETSTATUSWINDOWPOSサブメッセージ

IMC_GETSTATUSWINDOWPOSサブメッセージは、
状態ウィンドウの位置を取得するために、
アプリによってIMEウィンドウへ送信される。

	WM_IME_CONTROL
	wSubMessage= IMC_GETSTATUSWINDOWPOS;
	lParam = 0;

===引数

lParam
	使用されない。

===戻り値

戻り値は、スクリーン座標系で、状態ウィンドウの位置のxおよびy座標を含むPOINTS構造体を指定する。

===コメント

POINTS構造体は次の形式を持つ。

	typedef struct tagPOINTS { /* pts */
	SHORT x;
	SHORT y;
	} POINTS;

UIウィンドウはこのメッセージを受け取る。

==IMC_SETCANDIDATEPOSサブメッセージ

IMC_SETCANDIDATEPOSサブメッセージは、候補ウィンドウの表示位置を指定するために、
アプリによってIMEウィンドウへ送信される。
特に、これは、コンポジット文字列を表示するが
候補を表示するためにIME UIを使うアプリに適用される。

	WM_IME_CONTROL
	wSubMessage= IMC_SETCANDIDATEPOS;
	lpCANDIDATEFORM= (LPCANDIDATEFORM) lParam;

===引数

lpCANDIDATEFORM
	候補ウィンドウの位置情報を含むバッファ。

===戻り値

メッセージが成功すれば、戻り値はゼロ。さもなければ戻り値は非ゼロ。

===コメント

UIウィンドウはこのメッセージを受け取らない。

==IMC_SETCOMPOSITONFONTサブメッセージ

IMC_SETCOMPOSITONFONTサブメッセージは、
コンポジットウィンドウで未決定文字列の表示に使うフォントを指定するために、
アプリによってIMEウィンドウへ送信される。

	WM_IME_CONTROL
	wSubMessage= IMC_SETCOMPOSITIONFONT;
	lpLogFont= (LPLOGFONT) lParam;

===引数

lpLogFont
	セットするLOGFONTデータを含むバッファ。

===戻り値

メッセージが成功すれば、戻り値はゼロ。さもなければ戻り値は非ゼロ。

===コメント

UIウィンドウはこのメッセージを受け取らない。

==IMC_SETCOMPOSITONWINDOWサブメッセージ

IMC_SETCOMPOSITONWINDOWサブメッセージは、
現在アクティブな入力コンテキストのコンポジションウィンドウのスタイルをセットするために、
アプリによってIMEウィンドウへ送信される。
一度スタイルをセットすれば、IME UIは入力コンテキストで指定されたスタイルに従う。

	WM_IME_CONTROL
	wSubMessage= IMC_SETCOMPOSITIONWINDOW;
	lpCOMPOSITIONFORM= (LPCOMPOSITIONFORM) lParam;

===引数

lpCOMPOSITIONFORM
	コンポジションウィンドウに対する新しいスタイルを含むCOMPOSITIONFORM構造体。

===戻り値

メッセージが成功されば、戻り値はゼロ。さもなければ戻り値は非ゼロ。

===コメント

IME UIは、コンポジションウィンドウに対する既定のスタイルを使う。それはCFS_POINTスタイルに等しい。
もしアプリがその入力コンテキストにおいて、コンポジションスタイルが指定しなければ、
IME UIは、アプリがコンポジションウィンドウを開くときに、
クライアント座標系で、現在のキャレット位置とウィンドウクライアント領域を受け取る。
UIウィンドウはこのメッセージを受け取らない。

==IMC_SETSOFTKBDDATAサブメッセージ

IMC_SETSOFTKBDDATAサブメッセージは、
ソフトキーボードウィンドウにおける表示文字列に使う文字コードを指定するために、
IMEによってソフトキーボードウィンドウへ送信される。

	WM_IME_CONTROL
	wSubMessage= IMC_SETSOFTKBDDATA;
	lpSoftKbdData= (LPSOFTKBDDATA) lParam;

===引数

lpSoftKbdData
	表示文字列に使われる文字コードを指定するためのバッファを指し示す。

===戻り値

メッセージが成功されば、戻り値はゼロ。さもなければ戻り値は非ゼロ。

===コメント

UIウィンドウはこのメッセージを受け取らない。

==IMC_SETSOFTKBDSUBTYPEサブメッセージ

IMC_SETSOFTKBDSUBTYPEサブメッセージは、IMEによって、
ソフトキーボードウィンドウにおける表示文字列に使うサブタイプを指定するために、
ソフトキーボードウィンドウへ送信される。
これはIME特有の目的でも使える。

	WM_IME_CONTROL
	wSubMessage= IMC_SETSOFTKBDSUBTYPE;
	lSubType= lParam;

===引数

lSubType
	セットするサブタイプ。

===戻り値

戻り値は、サブタイプ。-1の戻り値は、失敗を意味する。

===コメント

UIウィンドウはこのメッセージを受け取らず、SOFTKEYBOARD_TYPE_T1はこの情報を使わない。
IMEは、ソフトキーボードが表示読み文字列を変更しようとしないように、
このメッセージを送信する。
IMEは、このメッセージの意味を定義するために、
SOFTKEYBOARD_TYPE_T1ソフトキーボードを使い、
IMC_GETSOFTKBDSUBTYPEを使ってこのデータを取得できる。

==IMC_SETSOFTKBDFONTサブメッセージ

IMC_SETSOFTKBDFONTサブメッセージは、
ソフトキーボードウィンドウにおける表示文字列で使うフォントを指定するために、
IMEによってソフトキーボードウィンドウへ送信される。

	WM_IME_CONTROL
	wSubMessage= IMC_SETSOFTKBDFONT;
	lpLogFont= (LPLOGFONT)lParam;

===引数

lpLogFont
	セットするLOGFONTを指し示す。

===戻り値

メッセージが成功すれば、戻り値はゼロ。さもなければ戻り値は非ゼロ。

===コメント

UIウィンドウは、このメッセージを受け取らない。

==IMC_SETSOFTKBDPOSサブメッセージ

IMC_SETSOFTKBDPOSサブメッセージは、
ソフトキーボードウィンドウの位置をセットするために、
UIウィンドウによってソフトキーボードウィンドウへ送信される。

	WM_IME_CONTROL
	wSubMessage= IMC_SETSOFTKBDPOS;
	ptsPt= (POINTS)lParam;

===引数

ptsPt
	スクリーン座標系でソフトキーボードウィンドウの位置のxおよびy座標を含むPOINTS構造体を指定する。

===戻り値

メッセージが成功すれば、戻り値はゼロ。さもなければ戻り値は非ゼロ。

===コメント

POINTS構造体は次の形式を持つ。

	typedef struct tagPOINTS { /* pts */
	SHORT x;
	SHORT y;
	} POINTS;

==IMC_SETSTATUSWINDOWPOSサブメッセージ

IMC_SETSTATUSWINDOWPOSサブメッセージは、
除隊ウィンドウの位置をセットするために、
アプリによってIMEウィンドウへ送信される。

	WM_IME_CONTROL
	wSubMessage= IMC_SETSTATUSWINDOWPOS;
	ptsPt= (POINTS)lParam;

===引数

ptsPt
	スクリーン座標系で状態ウィンドウの位置のxおよびy座標を含むPOINTS構造体を指定する。

===戻り値

メッセージが成功すれば、戻り値はゼロ。さもなければ戻り値は非ゼロ。

===コメント

POINTS構造体は次の形式を持つ。

	typedef struct tagPOINTS { /* pts */
	SHORT x;
	SHORT y;
	} POINTS;

=WM_IME_COMPOSITIONメッセージ

WM_IME_COMPOSITIONメッセージは、
IMEコンポジション状態がユーザーによって変更されるときに、
アプリへ送信される。
メッセージはコンポジション文字の2バイトから構成される。
IME UIウィンドウは、それがこのメッセージを処理するときに、見た目を変える。
アプリは、新しいコンポジション状態を取得するために、
ImmGetCompositionString を呼び出すことができる。

	WM_IME_COMPOSITION
	wChar= wParam;
	lAttribute= lParam;

===引数

wChar
	コンポジション文字の最新の変更点の2バイト。

lAttribute
	以下のフラグ組み合わせからなる。基本的に、フラグは
	どのようにコンポジション文字列または文字が変更されたかを示す。
	アプリは必要な情報を取得するためにこれをチェックする。
	(略)

===戻り値

なし。

===コメント

アプリ自体がコンポジション文字列を表示したいとき、
このメッセージをアプリケーションIME UIウィンドウや、DefWindowProcへ渡すべきではない。
DefWindowProc関数は、このメッセージを既定のIMEウィンドウに渡すために処理する。
IMEは、IMEが現在のコンポジションをキャンセルするだけであっても、
このメッセージをアプリへ送信すべきだ。
このメッセージは、現在のコンポジション文字列を消すために、
アプリやIME UIに通知するために使われるべきだ。

===参照

ImmGetCompositionString

=WM_IME_COMPOSITIONFULLメッセージ

WM_IME_COMPOSITIONFULLメッセージは、
IME UIウィンドウがコンポジションウィンドウのサイズを増やせないときに、
アプリに送信される。
アプリは、このメッセージを受け取ったときに、
どのようにIME UIウィンドウを表示するか指定すべきである。

	WM_IME_COMPOSITIONFULL
	wParam = 0
	lParam= 0

==引数

wParam
	使われない。

lParam
	使われない。

==戻り値

なし。

==コメント

このメッセージは、IME UIウィンドウによってアプリに送信される通知である。
IME自身によるものではない。
IMEは、この通知を送信するためにSendMessageを使う。

==参照

IMC_SETCOMPOSITONWINDOW

=WM_IME_ENDCOMPOSITIONメッセージ

WM_IME_ENDCOMPOSITIONメッセージは、
IMEがコンポジションを終了したときに、アプリに送信される。

	WM_IME_ENDCOMPOSITION
	wParam = 0
	lParam= 0

==引数

wParam
	使われない。
lParam
	使われない。

==戻り値

なし。

==コメント

アプリ自体がコンポジション文字列を表示したいとき、
このメッセージをアプリケーションIME UIウィンドウやDefWindowProcへ渡すべきではない。
DefWindowProc は、既定のIMEウィンドウにそれを渡すために、このメッセージを処理する。

=WM_IME_SELECTメッセージ

WM_IME_SELECTメッセージは、システムが現在のIMEを変更しようとしているときに、
UIウィンドウに送信される。

	WM_IME_SELECT
	fSelect= (BOOL)wParam;
	hKL= lParam;

==引数

fSelect
	IMEが新しく選択されたらTRUE。IMEが選択を解除されたらFALSE。
hKL
	IMEの入力言語ハンドル。

==戻り値

なし。

==コメント

システムIMEクラスは、新しいUIウィンドウを作成、並びに
アプリやシステムに対する古いUIウィンドウを破棄するために
このメッセージを使う。
DefWindowProc は、既定のIMEウィンドウへ情報を渡すために、
このメッセージを処理する。
そのとき既定のIMEウィンドウは、UIウィンドウへこのメッセージを送信する。

